company_detail_list = {
    'Company 1': {
        'name': 'Company 1',
        'domain': 'Retail',
        'clients': [
            {
                'name': 'acme.inc',
                'country': 'united states'
            },
            {
                'name': 'Wayne.co',
                'country': 'united states'
            }
        ]
    },
    'Company 2': {
        'name': 'Company 2',
        'domain': 'Construction',
        'clients': [
            {
                'name': 'Tesla',
                'country': 'united states'
            },
            {
                'name': 'Japan Airlines',
                'country': 'japan'
            },
            {
                'name': 'Indofood',
                'country': 'indonesia'
            }
        ]
    },
    'Company 3': {
        'name': 'Company 3',
        'domain': 'Healthcare',
        'clients': [
            {
                'name': 'Petronas',
                'country': 'malaysia'
            },
            {
                'name': 'VW Group',
                'country': 'germany'
            },
            {
                'name': 'IBM',
                'country': 'united states'
            },
            {
                'name': 'Mitsubishi',
                'country': 'japan'
            }
        ]
    }
}
def sort_company():
    sorted_companies = sorted(
        [{'name': details['name'], 'domain': details['domain']} 
         for key, details in company_detail_list.items()],
        key=lambda x: x['domain'],
        reverse=False
    )
    for company in sorted_companies:
        print(f"Name: {company['name']}, Domain: {company['domain']}")

sort_company()

##NOMOR2##
def get_company_domain():
    company_info = {}
    for company_name, details in company_detail_list.items():
        domain = details['domain']
        number_of_clients = len(details['clients'])
        company_info[company_name] = f"{domain}, relation: {number_of_clients} clients"
    return company_info

company_domains = get_company_domain()
for company, info in company_domains.items():
    print(f"{company}: {info}")

##NOMOR3##
def get_employees():
    employee_data = [
        {"full_name": "John Doe", "company": "Company 1"},
        {"full_name": "Tom Smith", "company": "Company 2"},
        {"full_name": "Andrew Sebastian", "company": "Company 2"}
    ]

    company_detail_list = {
        'Company 1': {
            'name': 'Company 1',
            'domain': 'Retail'
        },
        'Company 2': {
            'name': 'Company 2',
            'domain': 'Construction'
        },
        'Company 3': {
            'name': 'Company 3',
            'domain': 'Healthcare'
        }
    }

    for employee in employee_data:
        company = employee['company']
        employee['domain'] = company_detail_list[company]['domain']

    return employee_data

employees = get_employees()

for employee in employees:
    print(f"Nama_Lengkap: {employee['full_name']}")
    print(f"Nama_Perusahaan: {employee['company']}")
    print(f"Nama_Domain: {employee['domain']}")
    print() 

##NOMOR4##
def get_employees_by_company():
    employee_data = [
        {"full_name": "John Doe", "company": "Company 1"},
        {"full_name": "Tom Smith", "company": "Company 2"},
        {"full_name": "Andrew Sebastian", "company": "Company 2"}
    ]

    company_employees = {}

    company_detail_list = ['Company 1', 'Company 2', 'Company 3']
    for company in company_detail_list:
        company_employees[company] = []

    for employee in employee_data:
        company = employee['company']
        company_employees[company].append(employee['full_name'])

    result = []
    for company, employees in company_employees.items():
        result.append({"company": company, "employees": employees})

    return result



companies_with_employees = get_employees_by_company()

for company in companies_with_employees:
    print(f"Perusahaan: {company['company']}")
    print("Nama_Karyawan:")
    if company['employees']:
        for employee in company['employees']:
            print(f"- {employee}")
    else:
        print("- data karyawan tidak ada")
    print() 


##PROCESSING DATA##
import pandas as pd
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler

data_startup = pd.DataFrame({
    'R&D Spend': [1000.23, float('nan'), 76253.86, 63408.86, 28754.33, 119943.24, 134615.46],
    'Administration': [124153.04, 110594.11, 113867.30, 129219.61, 118546.05, 156547.42, 147198.87],
    'Marketing Spend': [1903.93, 229160.95, 298664.47, 46085.25, 172295.67, 256512.92, 127716.82],
    'State': ['New York', 'Florida', 'California', 'California', 'California', 'Florida', 'California'],
    'Profit': [64926.08, 146121.95, 118474.03, 97427.84, 78239.91, 132602.65, 156122.51]
})


data_startup['R&D Spend'].fillna(data_startup['R&D Spend'].mean(), inplace=True)

ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), ['State'])], remainder='passthrough')
data_startup = pd.DataFrame(ct.fit_transform(data_startup))

data_startup.columns = ['State_New York', 'State_Florida', 'State_California', 'R&D Spend', 'Administration', 'Marketing Spend', 'Profit']

data_startup['Tax'] = (data_startup['Profit'] + data_startup['Marketing Spend'] + data_startup['Administration']) * 0.05


scaler = StandardScaler()
data_startup[['R&D Spend', 'Administration', 'Marketing Spend', 'Profit', 'Tax']] = scaler.fit_transform(data_startup[['R&D Spend', 'Administration', 'Marketing Spend', 'Profit', 'Tax']])



data_startup.index += 1

print(data_startup)
